/*
 * ProfileDialog.java
 *
 * Created on 24 sept. 2010, 20:55:18
 */

package booknaviger;

import booknaviger.errorhandler.KnownErrorBox;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Action;

/**
 *
 * @author Inervo
 */
public class ProfileDialog extends javax.swing.JDialog {

    BookNavigerView bnv = null;

    /** Creates new form ProfileDialog */
    public ProfileDialog(BookNavigerView bnv, boolean modal) {
        super(bnv.getFrame(), modal);
        initComponents();
        this.bnv = bnv;
        getRootPane().setDefaultButton(okButton);
        this.setLocationRelativeTo(this.getParent());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        profileScrollPane = new javax.swing.JScrollPane();
        profileTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(booknaviger.BookNavigerApp.class).getContext().getResourceMap(ProfileDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(booknaviger.BookNavigerApp.class).getContext().getActionMap(ProfileDialog.class, this);
        createButton.setAction(actionMap.get("createNewProfile")); // NOI18N
        createButton.setText(resourceMap.getString("createButton.text")); // NOI18N
        createButton.setName("createButton"); // NOI18N

        deleteButton.setAction(actionMap.get("deleteProfile")); // NOI18N
        deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
        deleteButton.setName("deleteButton"); // NOI18N

        profileScrollPane.setName("profileScrollPane"); // NOI18N

        profileTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        profileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Folder"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        profileTable.setAutoCreateRowSorter(true);
        profileTable.setDragEnabled(true);
        profileTable.setDropMode(javax.swing.DropMode.INSERT_ROWS);
        profileTable.setGridColor(resourceMap.getColor("profileTable.gridColor")); // NOI18N
        profileTable.setName("profileTable"); // NOI18N
        profileTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        profileTable.setShowGrid(true);
        profileTable.getTableHeader().setReorderingAllowed(false);
        profileScrollPane.setViewportView(profileTable);
        profileTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("profileTable.columnModel.title0")); // NOI18N
        profileTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("profileTable.columnModel.title1")); // NOI18N
        profileTable.setTransferHandler(new TableTransferHandler());

        cancelButton.setAction(actionMap.get("cancel")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        okButton.setAction(actionMap.get("ok")); // NOI18N
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(createButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(deleteButton)
                .addContainerGap(206, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(284, Short.MAX_VALUE)
                .add(cancelButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(okButton)
                .add(17, 17, 17))
            .add(profileScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(createButton)
                    .add(deleteButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(profileScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okButton)
                    .add(cancelButton))
                .add(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setDataToTable(String[][] data) {
        DefaultTableModel dtm = (DefaultTableModel) profileTable.getModel();
        for (String[] string : data) {
            dtm.addRow(string);
        }
    }

    @Action
    public void createNewProfile() {
        DefaultTableModel dtm = (DefaultTableModel) profileTable.getModel();
        dtm.addRow(new Object[] {"", ""});
        profileTable.requestFocusInWindow();
        profileTable.editCellAt(profileTable.getRowCount() - 1, 0);
    }

    @Action
    public void deleteProfile() {
        int selectedRow = profileTable.getSelectedRow();
        if (selectedRow == -1) {
            new KnownErrorBox(null, KnownErrorBox.WARNING_lOGO, "Warning_No_Profile_Selected");
            return;
        }
        if (profileTable.getRowCount() == 1) {
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel) profileTable.getModel();
        dtm.removeRow(selectedRow);
    }

    @Action
    public void ok() {
        String[][] data = new String[profileTable.getRowCount()][2];
        for (int i = 0; i < data.length; i++) {
            data[i][0] = (String) profileTable.getValueAt(i, 0);
            data[i][1] = (String) profileTable.getValueAt(i, 1);
            if (data[i][0] == null || data[i][0].equals("")) {
                new KnownErrorBox(null, KnownErrorBox.WARNING_lOGO, "Warning_Profile_Without_Name");
                return;
            }
        }
        for (JRadioButtonMenuItem profileRadioButtonMenuItem : bnv.profilesListRadioButtonMenuItem) {
            bnv.profileButtonGroup.remove(profileRadioButtonMenuItem);
            bnv.profileMenu.remove(profileRadioButtonMenuItem);
        }
        bnv.profilesListRadioButtonMenuItem.clear();
        boolean profileIdSet = false;
        bnv.profiles = data;
        int index = -1;
        for (int i = 0; i < data.length; i++) {
            JRadioButtonMenuItem profileRadioButtonMenuItem = bnv.createProfileRadioButtonMenuItem(data[i][0]);
            if (bnv.directory == null ? false : bnv.directory.toString().equals(data[i][1])) {
                index = i;
                profileRadioButtonMenuItem.setSelected(true);
                bnv.currentProfile = (short) i;
                profileIdSet = true;
            }
        }
        bnv.createProfileComboBox();
        if (!profileIdSet) {
            bnv.currentProfile = 0;
            bnv.applyProfile();
        } else
            bnv.profilesComboBox.setSelectedIndex(index);
        dispose();
    }

    @Action
    public void cancel() {
        dispose();
    }

    class TableTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.MOVE;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            JTable t = (JTable) c;
            StringSelection ss = new StringSelection(String.valueOf(t.getSelectedRow()));
            return ss;
        }

        @Override
        public boolean canImport(TransferSupport support) {
            if (!support.isDrop())
                return false;
            if (!support.isDataFlavorSupported(DataFlavor.stringFlavor))
                return false;
            return ((JTable.DropLocation)support.getDropLocation()).isInsertRow();
        }

        @Override
        public boolean importData(TransferSupport support) {
            if (!canImport(support))
                return false;
            JTable.DropLocation dl = (JTable.DropLocation)support.getDropLocation();
            int dstRow = dl.getRow();
            Transferable trans = support.getTransferable();
            int srcRow = 0;
            try {
                srcRow = Integer.parseInt((String) trans.getTransferData(DataFlavor.stringFlavor));
            } catch (UnsupportedFlavorException ex) {
                Logger.getLogger(ProfileDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ProfileDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            JTable table = (JTable) support.getComponent();
            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            if (dstRow < 0)
                dstRow = 0;
            if (dstRow > dtm.getRowCount() - 1)
                dstRow = dtm.getRowCount() - 1;
            dtm.moveRow(srcRow, srcRow, dstRow);
            return true;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton okButton;
    private javax.swing.JScrollPane profileScrollPane;
    private javax.swing.JTable profileTable;
    // End of variables declaration//GEN-END:variables

}

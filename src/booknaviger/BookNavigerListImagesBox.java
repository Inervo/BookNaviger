/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BookNavigerListImagesBox.java
 *
 * Created on 15 oct. 2009, 00:39:54
 */

package booknaviger;

import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Inervo
 */
public class BookNavigerListImagesBox extends javax.swing.JDialog {

    String[] imagesName = null;
    BookNavigerReadView bnrv;

    /** Creates new form BookNavigerListImagesBox
     * @param bnrv Instance de BookNavigerReadView
     */
    public BookNavigerListImagesBox(BookNavigerReadView bnrv) {
        super(bnrv);
        initComponents();
        this.bnrv = bnrv;
        StaticWorld.setQuickSearch(imagesTable, true, this);
        this.setLocationRelativeTo(this.getParent());
    }

    /**
     * rempli le tableau avec les valeurs des noms de pages
     * @param imagesName liste des noms de page
     * @param currentImage page courante
     */
    public void setImagesNames(final String[] imagesName, final int currentImage) {
        final DefaultTableModel dtm = (DefaultTableModel) imagesTable.getModel();
        List<Thread> rows = new ArrayList<Thread>();
        for (int i = 0; i < imagesName.length; i++) {
            final int index = i;
            Thread tampon = new Thread(new Runnable() {

                @Override
                public void run() {
                    dtm.addRow(new Object[] {imagesName[index]});
                }
            });
            SwingUtilities.invokeLater(tampon);
            rows.add(tampon);
        }
        for (Thread thread : rows) {
            try {
                thread.join();
            } catch (InterruptedException ex) {
                Logger.getLogger(BookNavigerView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                imagesTable.getSelectionModel().setSelectionInterval(currentImage, currentImage);
                Rectangle cellRect = imagesTable.getCellRect(currentImage, 0, true);
                cellRect.y += 1;
                imagesTable.scrollRectToVisible(cellRect);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagesScrollPane = new javax.swing.JScrollPane();
        imagesTable = new javax.swing.JTable() {

            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setMinWidth(getParent().getWidth());
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };
        imagesTable.getPreferredSize().width = 596;
        imagesTable.getSize().width = 586;

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("listImagesBox"); // NOI18N
        setUndecorated(true);

        imagesScrollPane.setName("imagesScrollPane"); // NOI18N
        imagesScrollPane.setViewportView(imagesTable);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(booknaviger.BookNavigerApp.class).getContext().getResourceMap(BookNavigerListImagesBox.class);
        imagesTable.setBackground(resourceMap.getColor("imagesTable.background")); // NOI18N
        imagesTable.setForeground(resourceMap.getColor("imagesTable.foreground")); // NOI18N
        imagesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pages"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        imagesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        imagesTable.setFillsViewportHeight(true);
        imagesTable.setName("imagesTable"); // NOI18N
        imagesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        imagesTable.setShowHorizontalLines(false);
        imagesTable.setShowVerticalLines(false);
        imagesTable.getTableHeader().setReorderingAllowed(false);
        imagesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newPageMouseClicked(evt);
            }
        });
        imagesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BookNavigerListImagesBox.this.keyPressed(evt);
            }
        });
        imagesScrollPane.setViewportView(imagesTable);
        imagesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("imagesTable.columnModel.title0")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)
            this.dispose();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            new Thread(new Runnable() {

                @Override
                public void run() {
                    bnrv.displayPage(imagesTable.getSelectionModel().getMinSelectionIndex() + 1);
                }
            }).start();
            this.dispose();
        }
        if (evt.getKeyCode() == KeyEvent.VK_TAB)
            evt.consume();
    }//GEN-LAST:event_keyPressed

    private void newPageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newPageMouseClicked
        if (evt.getClickCount() == 2) {
            new Thread(new Runnable() {

                @Override
                public void run() {
                    bnrv.displayPage(imagesTable.getSelectionModel().getMinSelectionIndex() + 1);
                }
            }).start();
            this.dispose();
        }
    }//GEN-LAST:event_newPageMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane imagesScrollPane;
    private javax.swing.JTable imagesTable;
    // End of variables declaration//GEN-END:variables

}

/*
 */
package booknaviger.readinterface;

import booknaviger.picturehandler.AbstractImageHandler;
import booknaviger.picturehandler.ImageReader;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Inervo
 */
public class ReadInterface extends javax.swing.JFrame {
    
    private AbstractImageHandler imageHandler = null;
    private int pageNbr = 0;

    /**
     * Creates new form ReadInterface
     */
    public ReadInterface(AbstractImageHandler abstractImageHandler) {
        this.imageHandler = abstractImageHandler;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        readInterfaceScrollPane = new javax.swing.JScrollPane();
        readComponent = new booknaviger.readinterface.ReadComponent(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                readInterfaceKeyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout readComponentLayout = new org.jdesktop.layout.GroupLayout(readComponent);
        readComponent.setLayout(readComponentLayout);
        readComponentLayout.setHorizontalGroup(
            readComponentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 396, Short.MAX_VALUE)
        );
        readComponentLayout.setVerticalGroup(
            readComponentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 296, Short.MAX_VALUE)
        );

        readInterfaceScrollPane.setViewportView(readComponent);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(readInterfaceScrollPane))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(readInterfaceScrollPane))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readInterfaceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readInterfaceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            readNextImage();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            readPreviousImage();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_readInterfaceKeyPressed
    
    public void readFirstImage() {
        pageNbr = 1;
        readPageNbrImage();
    }
    
    private void readNextImage() {
        pageNbr++;
        if (!readPageNbrImage()) {
            pageNbr--;
            System.out.println("endpage"); // TODO : endpage, out of range
        }
    }
    
    private void readPreviousImage() {
        pageNbr--;
        if (!readPageNbrImage()) {
            pageNbr++;
            System.out.println("firstpage"); // TODO : endpage, out of range
        }
    }
    
    private boolean readPageNbrImage() {
        if (!imageHandler.isImageInRange(pageNbr)) {
            return false;
        }
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                readComponent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); // Ended in readComponent.setImage(...)
            }
        });
        BufferedImage readImage = imageHandler.getImage(pageNbr);
        if (readImage == null) {
            readImage = new ImageReader(new javax.swing.ImageIcon(getClass().getResource(java.util.ResourceBundle.getBundle("booknaviger/resources/ReadComponent").getString("no_image"))).getImage()).convertImageToBufferedImage();
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "can't read image");
        }
        readComponent.setImage(readImage);
        return true;
    }

    public JScrollPane getReadInterfaceScrollPane() {
        return readInterfaceScrollPane;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private booknaviger.readinterface.ReadComponent readComponent;
    private javax.swing.JScrollPane readInterfaceScrollPane;
    // End of variables declaration//GEN-END:variables
}

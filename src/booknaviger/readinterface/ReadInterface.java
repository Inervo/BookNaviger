/*
 */
package booknaviger.readinterface;

import booknaviger.macworld.MacOSXApplicationAdapter;
import booknaviger.macworld.TrackPadAdapter;
import booknaviger.picturehandler.AbstractImageHandler;
import booknaviger.picturehandler.ImageReader;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;

/**
 *
 * @author Inervo
 */
public class ReadInterface extends javax.swing.JFrame {
    
    private AbstractImageHandler imageHandler = null;
    private int pageNbr = 0;
    private boolean dualPageReadMode = false;
    TrackPadAdapter tpa = null;

    /**
     * Creates new form ReadInterface
     */
    public ReadInterface(AbstractImageHandler abstractImageHandler) {
        this.imageHandler = abstractImageHandler;
        initComponents();
        if (MacOSXApplicationAdapter.isMac()) {
            System.out.println("add Mac Gesture adapter - doesn't work...");
            tpa = new TrackPadAdapter(this); // TODO : don't work !! WHYYYYY ???
            tpa.addListenerOn(getRootPane());
        }
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        readInterfaceScrollPane = new javax.swing.JScrollPane();
        readComponent = new booknaviger.readinterface.ReadComponent();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setExtendedState(MAXIMIZED_BOTH);
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                readInterfaceKeyPressed(evt);
            }
        });

        readInterfaceScrollPane.setBorder(null);

        readComponent.setDoubleBuffered(true);
        readComponent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readComponentMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout readComponentLayout = new org.jdesktop.layout.GroupLayout(readComponent);
        readComponent.setLayout(readComponentLayout);
        readComponentLayout.setHorizontalGroup(
            readComponentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 500, Short.MAX_VALUE)
        );
        readComponentLayout.setVerticalGroup(
            readComponentLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 285, Short.MAX_VALUE)
        );

        readInterfaceScrollPane.setViewportView(readComponent);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(readInterfaceScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(readInterfaceScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readInterfaceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readInterfaceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            goNextImage(); // TODO: image plus large que l'écran
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            goPreviousImage(); // TODO: image plus large que l'écran
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            goPrevious10Image();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            goNext10Image();
        } else if (evt.getKeyCode() == KeyEvent.VK_HOME) {
            goFirstImage();
        } else if (evt.getKeyCode() == KeyEvent.VK_END) {
            goLastImage();
        } else if (evt.getKeyChar() == '-') {
            readComponent.zoomOut();
        } else if (evt.getKeyChar() == '+') {
            readComponent.zoomIn();
        } else if (evt.getKeyCode() == KeyEvent.VK_0) {
            readComponent.normalZoom();
        } else if (evt.getKeyCode() == KeyEvent.VK_Z) { // TODO: change shortcuts. For fr keyboard only
            readComponent.rotateImage(180);
        } else if (evt.getKeyCode() == KeyEvent.VK_Q) {
            readComponent.rotateImage(90);
        } else if (evt.getKeyCode() == KeyEvent.VK_D) {
            readComponent.rotateImage(270);
        } else if (evt.getKeyCode() == KeyEvent.VK_S) {
            readComponent.rotateImage(0);
        } else if (evt.getKeyCode() == KeyEvent.VK_1) {
            dualPageReadMode = false;
            readPageNbrImage();
        } else if (evt.getKeyCode() == KeyEvent.VK_2) {
            dualPageReadMode = true;
            readPageNbrImage();
        } else if (evt.getKeyCode() == KeyEvent.VK_H) {
            readComponent.changeFitToScreenHorizontally();
        } else if (evt.getKeyCode() == KeyEvent.VK_V) {
            readComponent.changeFitToScreenVertically();
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_readInterfaceKeyPressed

    private void readComponentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readComponentMouseClicked
        goNextImage();
    }//GEN-LAST:event_readComponentMouseClicked
    
    public void goFirstImage() {
        pageNbr = 1;
        readPageNbrImage();
    }
    
    private void goLastImage() {
        pageNbr = imageHandler.getNbrOfPages();
        readPageNbrImage();
    }
    
    public void goNextImage() {
        if (dualPageReadMode) {
            pageNbr += 2;
        } else {
            pageNbr++;
        }
        if (!readPageNbrImage()) {
            if (dualPageReadMode) {
                pageNbr = imageHandler.getNbrOfPages() - 1;
            } else {
                pageNbr--;
            }
            readPageNbrImage();
            readComponent.setLastPageReached();
        }
    }
    
    public void goPreviousImage() {
        if (dualPageReadMode) {
            pageNbr -= 2;
        } else {
            pageNbr--;
        }
        if (!readPageNbrImage()) {
            goFirstImage();
            readComponent.setFirstPageReached();
        }
    }
    
    private void goNext10Image() {
        pageNbr += 10;
        if (!readPageNbrImage()) {
            goLastImage();
        }
    }
    
    private void goPrevious10Image() {
        pageNbr -= 10;
        if (!readPageNbrImage()) {
            goFirstImage();
        }
    }
    
    private boolean readPageNbrImage() {
        if (!imageHandler.isImageInRange(pageNbr)) {
            return false;
        }
        if (dualPageReadMode && !imageHandler.isImageInRange(pageNbr+1)) {
            return false;
        }
        readComponent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR)); // Ended in readComponent.setImage(...)
        BufferedImage readImage;
        if (dualPageReadMode) {
            readImage = ImageReader.combine2Images(imageHandler.getImage(pageNbr), imageHandler.getImage(pageNbr+1));
        } else {
            readImage = imageHandler.getImage(pageNbr);
        }
        if (readImage == null) {
            readImage = new ImageReader(new javax.swing.ImageIcon(getClass().getResource(java.util.ResourceBundle.getBundle("booknaviger/resources/ReadComponent").getString("no_image"))).getImage()).convertImageToBufferedImage();
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "can't read image");
        }
        readComponent.setImage(readImage, true, readInterfaceScrollPane);
        return true;
    }

    public JScrollPane getReadInterfaceScrollPane() {
        return readInterfaceScrollPane;
    }

    public ReadComponent getReadComponent() {
        return readComponent;
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private booknaviger.readinterface.ReadComponent readComponent;
    private javax.swing.JScrollPane readInterfaceScrollPane;
    // End of variables declaration//GEN-END:variables
}

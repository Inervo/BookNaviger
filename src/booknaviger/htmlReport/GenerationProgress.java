/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package booknaviger.htmlReport;

import booknaviger.BookNavigerView;
import org.jdesktop.application.Action;

/**
 *
 * @author Inervo
 */
public class GenerationProgress extends javax.swing.JDialog {

    BookNavigerView bnv = null;
    CreateHTMLReport chr = null;

    /**
     * Constructeur de la fenêtre d'avancement de la génération
     * @param bnv Instance de BookNavigerViw
     * @param modal fenêtre modale ou non
     */
    public GenerationProgress(BookNavigerView bnv, boolean modal) {
        super(bnv.getFrame(), modal);
        this.bnv = bnv;
        bnv.waitingCursor(true);
        initComponents();
        getRootPane().setDefaultButton(cancelButton);
        this.setLocationRelativeTo(this.getParent());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogoLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        stateProgressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(booknaviger.BookNavigerApp.class).getContext().getResourceMap(GenerationProgress.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        LogoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LogoLabel.setIcon(resourceMap.getIcon("LogoLabel.icon")); // NOI18N
        LogoLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        LogoLabel.setName("LogoLabel"); // NOI18N

        infoLabel.setText(resourceMap.getString("infoLabel.text")); // NOI18N
        infoLabel.setName("infoLabel"); // NOI18N

        stateLabel.setName("stateLabel"); // NOI18N

        stateProgressBar.setName("stateProgressBar"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(booknaviger.BookNavigerApp.class).getContext().getActionMap(GenerationProgress.class, this);
        cancelButton.setAction(actionMap.get("quit")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(392, Short.MAX_VALUE)
                .add(cancelButton)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(LogoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(infoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(stateProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(stateLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(infoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(LogoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stateLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stateProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)
                .add(cancelButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Executé lors de la sortie de cette fenêtre
     */
    @Action
    public void quit() {
        chr.setCancelAsked(true);
        setVisible(false);
        dispose();
    }

    @Override
    public void dispose() {
        super.dispose();
        bnv.waitingCursor(false);
    }

    /**
     * Set de CreateHTMLReport
     * @param chr Instance de CreateHTMLReport
     */
    public void setChr(CreateHTMLReport chr) {
        this.chr = chr;
    }

    /**
     * Défini la valeur de la progressBar
     * @param value Nouvelle valeur de la progressBar
     */
    public void setStateProgressBarValue(int value) {
        this.stateProgressBar.setValue(value);
    }

    /**
     * Retourne la valeur de la progressBar
     * @return Valeur de la progressBar
     */
    public int getStateProgressBarValue() {
        return this.stateProgressBar.getValue();
    }

    /**
     * Défini le texte informant de l'action en cours
     * @param value String de l'action en cours
     */
    public void setStateLabelValue(String value) {
        this.stateLabel.setText("<html>" + value + "</html>");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LogoLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JProgressBar stateProgressBar;
    // End of variables declaration//GEN-END:variables

}

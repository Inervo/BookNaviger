/*
 */
package booknaviger.exceptioninterface;

import java.awt.Color;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Inervo
 */
public class LogInterface extends javax.swing.JDialog {
    
    private static LogInterface instance = null;
    StyledDocument doc = null;
    
    /**
     *
     * @return
     */
    public static LogInterface getInstance() {
        synchronized(LogInterface.class) {
            if (instance == null) {
                instance = new LogInterface();
            }
        }
        return instance;
    }
    
    public static void reinitializeLogInterface() {
        synchronized(LogInterface.class) {
            instance = null;
        }
    }

    /**
     * Creates new form LogInterface
     */
    private LogInterface() {
        super();
        initComponents();
        doc = logTextPane.getStyledDocument();
        Style newEntryStyle = logTextPane.addStyle("newEntry", null);
        Style oldEntryStyle = logTextPane.addStyle("oldEntry", null);
        StyleConstants.setForeground(newEntryStyle, Color.red);
        StyleConstants.setForeground(oldEntryStyle, Color.black);
    }

    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logScrollPane = new javax.swing.JScrollPane();
        logTextPane = new javax.swing.JTextPane();

        setTitle("Log");
        setAlwaysOnTop(true);

        logScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        logScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        logTextPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                logTextPaneComponentResized(evt);
            }
        });
        logScrollPane.setViewportView(logTextPane);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(logScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(logScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logTextPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_logTextPaneComponentResized
        logScrollPane.getVerticalScrollBar().setValue(logScrollPane.getVerticalScrollBar().getMaximum());
    }//GEN-LAST:event_logTextPaneComponentResized

    /**
     *
     * @param newLog
     */
    protected synchronized void publishNewLog(String newLog) {
        try {
            doc.setCharacterAttributes(0, doc.getLength(), logTextPane.getStyle("oldEntry"), true);
            doc.insertString(doc.getLength(), newLog + System.getProperty("line.separator"), logTextPane.getStyle("newEntry"));
        } catch (BadLocationException ex) {
            logTextPane.setText(newLog);
        }
        if (!isVisible()) {
            setVisible(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextPane logTextPane;
    // End of variables declaration//GEN-END:variables
}
